import math

# Constants
PLAYER_X = 'X'
PLAYER_O = 'O'
EMPTY = ' '

# Helper functions to check game status
def is_winner(board, player):
    """ Check if the given player has won the game """
    win_conditions = [
        # Rows
        [board[0][0], board[0][1], board[0][2]],
        [board[1][0], board[1][1], board[1][2]],
        [board[2][0], board[2][1], board[2][2]],
        # Columns
        [board[0][0], board[1][0], board[2][0]],
        [board[0][1], board[1][1], board[2][1]],
        [board[0][2], board[1][2], board[2][2]],
        # Diagonals
        [board[0][0], board[1][1], board[2][2]],
        [board[0][2], board[1][1], board[2][0]]
    ]
    return [player, player, player] in win_conditions

def is_full(board):
    """ Check if the board is full """
    return all(cell != EMPTY for row in board for cell in row)

def get_available_moves(board):
    """ Return a list of available moves (row, col) positions """
    return [(i, j) for i in range(3) for j in range(3) if board[i][j] == EMPTY]

def print_board(board):
    """ Print the Tic-Tac-Toe board """
    for row in board:
        print(' | '.join(row))
        print('-' * 5)

# Minimax Algorithm
def minimax(board, depth, is_maximizing, alpha, beta):
    if is_winner(board, PLAYER_X):
        return -1  # Human player wins
    if is_winner(board, PLAYER_O):
        return 1  # AI player wins
    if is_full(board):
        return 0  # Draw

    if is_maximizing:
        max_eval = -math.inf
        for move in get_available_moves(board):
            i, j = move
            board[i][j] = PLAYER_O
            eval = minimax(board, depth + 1, False, alpha, beta)
            board[i][j] = EMPTY
            max_eval = max(max_eval, eval)
            alpha = max(alpha, eval)
            if beta <= alpha:
                break
        return max_eval
    else:
        min_eval = math.inf
        for move in get_available_moves(board):
            i, j = move
            board[i][j] = PLAYER_X
            eval = minimax(board, depth + 1, True, alpha, beta)
            board[i][j] = EMPTY
            min_eval = min(min_eval, eval)
            beta = min(beta, eval)
            if beta <= alpha:
                break
        return min_eval

def find_best_move(board):
    """ Find the best move for AI using Minimax algorithm """
    best_move = None
    best_value = -math.inf
    for move in get_available_moves(board):
        i, j = move
        board[i][j] = PLAYER_O
        move_value = minimax(board, 0, False, -math.inf, math.inf)
        board[i][j] = EMPTY
        if move_value > best_value:
            best_value = move_value
            best_move = move
    return best_move

# Main Game Logic
def play_game():
    """ Main function to play the Tic-Tac-Toe game """
    board = [[EMPTY] * 3 for _ in range(3)]
    current_player = PLAYER_X  # Human plays first

    while True:
        print_board(board)
        if current_player == PLAYER_X:
            print("Your turn (X)! Enter row and column (0-2) separated by a space:")
            try:
                row, col = map(int, input().split())
                if board[row][col] == EMPTY:
                    board[row][col] = PLAYER_X
                    current_player = PLAYER_O
                else:
                    print("Invalid move, try again.")
            except (ValueError, IndexError):
                print("Invalid input, please enter valid row and column.")
        else:
            print("AI's turn (O)...")
            best_move = find_best_move(board)
            board[best_move[0]][best_move[1]] = PLAYER_O
            current_player = PLAYER_X

        # Check for game end
        if is_winner(board, PLAYER_X):
            print_board(board)
            print("Congratulations! You win!")
            break
        if is_winner(board, PLAYER_O):
            print_board(board)
            print("AI wins! Better luck next time.")
            break
        if is_full(board):
            print_board(board)
            print("It's a draw!")
            break

# Start the game
if __name__ == "__main__":
    play_game()
